package mandelbrot;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import mandelbrot.contexts.MandelbrotGuiContext;
import mandelbrot.contexts.MandelbrotTerminalContext;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import java.util.concurrent.Callable;

@Command(name = "mandelbrot", mixinStandardHelpOptions = true, version = "mandelbrot 1.0", description = "This challenge is to build your own application layer load balancer")
public class Mandelbrot implements Callable<Result> {

    public static int _verbose = 0;
    public static boolean verbose() {
        return _verbose >= 1;
    }
    public static boolean verbose2() {
        return _verbose >= 2;
    }
    public static void main(String[] args) {
        var mandelbrot = new Mandelbrot();
        var cmd = new CommandLine(mandelbrot);
        var exitCode = cmd.execute(args);
        Result result = cmd.getExecutionResult();
        if (result != null && result.toString() != null) {
            System.exit(exitCode);
        }
    }

    @Option(names = "-v", description = "verbose model level 1")
    boolean verbose = false;

    @Option(names = "-vv", description = "verbose model level 2")
    boolean verbose2 = false;

    @Option(names = "-c", description = "console output - default false")
    boolean consoleOutput = false;

    @Option(names = "-g", description = "GUI output - default true")
    boolean guiOutput = false;

    @Option(names = "-w", description = "width in pixel - default 100px if terminal out, 1000px if GUI out")
    int width = 100;

    @Option(names = "-i", description = "max iterations - default 1000")
    int maxIterations = 1000;

    @Option(names = "-o", description = "outpuf file name - default mandelbrot.png")
    String outputFileName = "mandelbrot.png";

    @Override
    public Result call() throws Exception {
        if (this.verbose) _verbose = 1;
        if (this.verbose2) _verbose = 2;
        if (!this.consoleOutput && !this.guiOutput) this.guiOutput = true;
        if (this.guiOutput) this.consoleOutput = false;
        if (this.guiOutput) this.width = width != 100 ? this.width : 1000;
        if (this.consoleOutput) this.width = width != 100 ? this.width : 100;
        var explorer = new MandelbrotExplorer();
        var context = this.consoleOutput ? new MandelbrotTerminalContext(explorer, this.width, this.maxIterations) : new MandelbrotGuiContext(explorer, this.width, this.maxIterations);
        explorer.setContext(context);
        explorer.run();
        return new Result();
    }
}