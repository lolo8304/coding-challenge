package dhcp;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.concurrent.Callable;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

@Command(name = "dhcp-client", mixinStandardHelpOptions = true, version = "dhcp-client 1.0", description = "This challenge is to build your own DHCP client application")
public class Client implements Callable<Result> {

    public static int _verbose = 0;
    @Option(names = "-v", description = "verbose model level 1")
    boolean verbose = false;
    @Option(names = "-vv", description = "verbose model level 2")
    boolean verbose2 = false;

    public static void main(String[] args) {
        var dhcp = new Client();
        var cmd = new CommandLine(dhcp);
        var exitCode = cmd.execute(args);
        Result result = cmd.getExecutionResult();
        if (result != null && result.toString() != null) {
            System.exit(exitCode);
        }
    }

    public static boolean verbose() {
        return _verbose >= 1;
    }

    public static boolean verbose2() {
        return _verbose >= 2;
    }

    @Override
    public Result call() throws Exception {
        if (this.verbose) _verbose = 1;
        if (this.verbose2) _verbose = 2;

        var dhcp = new DhcpProcess().run();
        if (verbose()) {
            System.out.println("DHCP Client started with the following configuration:");
            System.out.printf("Server IP: %s%n", dhcp.getServerIp());
            System.out.printf("Client IP: %s%n", dhcp.getClientIp());
            System.out.printf("Subnet Mask: %s%n", dhcp.getSubnetMask());
            System.out.printf("Gateway: %s%n", dhcp.getGateway());
            System.out.printf("DNS Server: %s%n", dhcp.getServerIp());
        }

        return new Result();
    }
}