/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import dhcp.message.DhcOption;
import dhcp.message.DhcOptions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.file.Paths;

class DhcpOptionsTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = DhcpOptionsTest.class.getResource("tests/"+testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test void new_simpleoption_ok() throws URISyntaxException, IOException {
        // Arrange
        // Action
        var option1 = new DhcOption(0);
        // Assert
        assert option1.getCode() == 0 : "Option code should be 0";
        assert option1.getLength() == 0 : "Option length should be 0";
        assert option1.getData() == null : "Option data should be null";

    }

    @Test void new_option_with_data_ok() throws URISyntaxException, IOException {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var option1 = new DhcOption(1, new byte[]{1, 2, 3, 4});
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCode() == 1 : "Option code should be 1";
        assert option1.getLength() == 4 : "Option length should be 4";
        assert option1.getData() != null : "Option data should not be null";
        assert option1.getData().length == 4 : "Option data length should be 4";
        assert buffer.position() == 5 : "Buffer position should be 5 after appending option with tagged data";
    }

    @Test void new_option_with_code_and_taggeddata_ok() throws URISyntaxException, IOException {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);

        // Action
        var option1 = new DhcOption(10, new byte[]{5, 6, 7, 8});
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 2";
        assert option1.getLength() == 4 : "Option length should be 4";
        assert option1.getData() != null : "Option data should not be null";
        assert option1.getData().length == 4 : "Option data length should be 4";

        assert buffer.position() == 6 : "Buffer position should be 6 after appending option";

    }

    @Test void new_option_with_code_and_taggeddata2_ok() throws URISyntaxException, IOException {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);

        // Action
        var option1 = new DhcOption(10, new byte[]{5, 6, 7, 8}, new byte[]{9, 10});
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 2";
        assert option1.getLength() == 6 : "Option length should be 6";
        assert option1.getData() != null : "Option data should not be null";
        assert option1.getData().length == 6 : "Option data length should be 6";

        assert buffer.position() == 8 : "Buffer position should be 8 after appending option with tagged data";

    }

    @Test void new_with_null_data_ok() {
        // Arrange
        // Action
        var option1 = new DhcOption(10, null);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 10";
        assert option1.getLength() == 0 : "Option length should be 0";
        assert option1.getData() == null : "Option data should be null";
    }

    @Test void new_with_empty_data_ok() {
        // Arrange
        // Action
        var option1 = new DhcOption(10, new byte[]{});
        // Assert
        assert option1.getCode() == 10 : "Option code should be 10";
        assert option1.getLength() == 0 : "Option length should be 0";
        assert option1.getData() != null : "Option data should not be null";
        assert option1.getData().length == 0 : "Option data length should be 0";
    }

    @Test void new_with_nulll_datadata2_ok() {
        // Arrange
        // Action
        var option1 = new DhcOption(10, null, null);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 10";
        assert option1.getLength() == 0 : "Option length should be 0";
        assert option1.getData() == null : "Option data should be null";
    }

    @Test void new_with_nulll_datanull_anddata2not_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var option1 = new DhcOption(10, null, new byte[]{1, 2, 3});
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 10";
        assert option1.getLength() == 3 : "Option length should be 3";
        assert option1.getData() != null : "Option data should not be null";
        assert buffer.position() == 5 : "Buffer position should be 4 after appending option with null data and tagged data";
    }

    @Test void new_with_nulll_data_anddata2null_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var option1 = new DhcOption(10, new byte[]{1, 2, 3}, null);
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCode() == 10 : "Option code should be 10";
        assert option1.getLength() == 3 : "Option length should be 3";
        assert option1.getData() != null : "Option data should not be null";
        assert buffer.position() == 5 : "Buffer position should be 4 after appending option with null data and tagged data";
    }

    @Test void new_withend_option_ok() throws URISyntaxException, IOException {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var option1 = new DhcOption(255);
        option1.appendToBuffer(buffer);
        // Assert
        assert option1.getCodeUInt() == 255 : "Option code should be 255";
        assert option1.getLength() == 0 : "Option length should be 0";
        assert option1.getData() == null : "Option data should be null";
        assert buffer.position() == 1 : "Buffer position should be 1 after appending end option";
    }

    @Test void toString_ok() {
        // Arrange
        var option1 = new DhcOption(10, new byte[]{1, 2, 3});
        // Action
        String str = option1.toString();
        // Assert
        assert str.equals("DhcOption{code=10, length=3, data=[1, 2, 3]}") : "toString() should return correct string representation";
    }
    @Test void toString_null_ok() {
        // Arrange
        var option1 = new DhcOption(10, null);
        // Action
        String str = option1.toString();
        // Assert
        assert str.equals("DhcOption{code=10, length=0, data=null}") : "toString() should return correct string representation for null data";
    }

    @Test void getCodeUInt_255() {
        // Arrange
        var option1 = new DhcOption(255);
        // Action
        int codeUInt = option1.getCodeUInt();
        // Assert
        assert codeUInt == 255 : "getCodeUInt() should return 255 for end option";
    }

    @Test void getCodeUInt_10() {
        // Arrange
        var option1 = new DhcOption(10, new byte[]{1, 2, 3});
        // Action
        int codeUInt = option1.getCodeUInt();
        // Assert
        assert codeUInt == 10 : "getCodeUInt() should return 10 for option with code 10";
    }

    @Test void getCodeUInt_0() {
        // Arrange
        var option1 = new DhcOption(0);
        // Action
        int codeUInt = option1.getCodeUInt();
        // Assert
        assert codeUInt == 0 : "getCodeUInt() should return 0 for option with code 0";
    }

    @Test void newOptions_single_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var options = new DhcOptions().add(1, new byte[]{1, 2, 3})
                                      .add(2, new byte[]{4, 5, 6});
        options.setToBuffer(buffer);

        // Assert
        // 1, 2, 3, 4, 5, 6, 0, 255
        assert buffer.position() == 249 : "Buffer position should be 248 but was "+ buffer.position()+" after setting options";
    }

    @Test void newOptions_multiple_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var options = new DhcOptions()
                .add(10, new byte[]{1, 2, 3})
                .add(11, new byte[]{4, 5, 6})
                .add(12, new byte[]{7, 8, 9});
        options.setToBuffer(buffer);

        // Assert
        // 10, 3, 1, 2, 3,   11, 3, 4, 5, 6,    12, 3, 7, 8, 9,     0, 255
        assert buffer.position() == 256 : "Buffer position should be 257 but was "+ buffer.position()+" after setting multiple options";
    }

    @Test void newOptions_withdataanddata2_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        // Action
        var options = new DhcOptions()
                .add(10, new byte[]{1, 2, 3})
                .add(11, new byte[]{4, 5, 6}, new byte[]{7, 8});
        options.setToBuffer(buffer);

        // Assert
        // 10, 3, 1, 2, 3,   11, 5, 4, 5, 6, 7, 8,   0, 255
        assert buffer.position() == 253 : "Buffer position should be 254 but was "+ buffer.position()+" after setting options with data and tagged data";
    }

    @Test void add_option_ok() {
        // Arrange
        var options = new DhcOptions();
        // Action
        options.add(new DhcOption(10, new byte[]{1, 2, 3}));
        // Assert
        assert options.getOptions().size() == 1 : "Options should contain one option";
        assert options.getOptions().get(0).getCode() == 10 : "Option code should be 10";
        assert options.getOptions().get(0).getData().length == 3 : "Option data length should be 3";
    }

    @Test void setToBuffer_empty_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        var options = new DhcOptions();
        // Action
        options.setToBuffer(buffer);
        // Assert
        assert buffer.position() == 241 : "Buffer position should be 241 but was "+ buffer.position()+" after setting empty options";
    }

    @Test void setToBuffer_with0and255_ok() {
        // Arrange
        var buffer = ByteBuffer.wrap(new byte[500]);
        var options = new DhcOptions();
        // Action
        options.add(new DhcOption(0));
        options.add(new DhcOption(255));
        options.setToBuffer(buffer);
        // Assert
        assert buffer.position() == 241 : "Buffer position should be 241 after setting options with code 0 and 255";
    }
}
