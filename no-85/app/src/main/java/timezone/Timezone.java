package timezone;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import java.util.concurrent.Callable;

@Command(name = "timezone", mixinStandardHelpOptions = true, version = "timezone 1.0", description = "This challenge is to build your own timezone converter")
public class Timezone implements Callable<Result> {

    public static int _verbose = 0;
    public static boolean verbose() {
        return _verbose >= 1;
    }
    public static boolean verbose2() {
        return _verbose >= 2;
    }
    public static void main(String[] args) {
        var timezone = new Timezone();
        var cmd = new CommandLine(timezone);
        var exitCode = cmd.execute(args);
        Result result = cmd.getExecutionResult();
        if (result != null && result.toString() != null) {
            System.exit(exitCode);
        }
    }

    @Option(names = "-v", description = "verbose model level 1")
    boolean verbose = false;

    @Option(names = "-vv", description = "verbose model level 2")
    boolean verbose2 = false;

    @Option(names = "-s", description = "set source timezone abbreviation. default is current timezone in switzerland CET")
    String sourceTimezone = "CET";

    @Option(names = "-t", arity = "0..N", description = "set target timezone abbreviations separated by ,. default is Canada / EST and London / GTM!")
    String targetTimezones = "EST,GMT";

    @Option(names = "-c", arity = "0..N", description = "set target timezone abbreviations based on a city name separated by ,")
    String targetTimezoneCities = "";

    @Override
    public Result call() throws Exception {
        if (this.verbose) _verbose = 1;
        if (this.verbose2) _verbose = 2;
        TimezoneDatabase.instance();
        if (targetTimezoneCities != null && !targetTimezoneCities.isBlank()) {
            TimezoneDisplay.fromCities(this.sourceTimezone, this.targetTimezoneCities).run();
        } else if (targetTimezones != null && !targetTimezones.isBlank()){
            TimezoneDisplay.fromTimezones(this.sourceTimezone, this.targetTimezones).run();
        } else {
            System.out.println("Use at least 1 timezone or city as target");
        }
        return new Result();
    }
}