package timezone;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import timezone.api.TimeZoneRequest;
import timezone.api.TimezoneConverterController;

import java.time.Instant;
import java.util.Arrays;
import java.util.concurrent.Callable;

@Command(name = "timezone", mixinStandardHelpOptions = true, version = "timezone 1.0", description = "This challenge is to build your own timezone converter")
public class Timezone implements Callable<Result> {

    public static int _verbose = 0;
    @Option(names = "-v", description = "verbose model level 1")
    boolean verbose = false;
    @Option(names = "-vv", description = "verbose model level 2")
    boolean verbose2 = false;
    @Option(names = "-s", description = "set source timezone abbreviation. default is current timezone is Europe/Zurich")
    String sourceTimezone = "Europe/Zurich";
    @Option(names = "-t", arity = "0..N", description = "set target timezone abbreviations separated by ,")
    String targetTimezones = "";
    @Option(names = "-c", arity = "0..N", description = "set target timezone abbreviations based on a city name separated by ,")
    String targetTimezoneCities = "";
    @Option(names = "--cc", arity = "0..N", description = "set target timezone country based separated by ,")
    String targetTimezoneCountries = "";

    public static boolean verbose() {
        return _verbose >= 1;
    }

    public static boolean verbose2() {
        return _verbose >= 2;
    }

    public static void main(String[] args) {
        var timezone = new Timezone();
        var cmd = new CommandLine(timezone);
        var exitCode = cmd.execute(args);
        Result result = cmd.getExecutionResult();
        if (result != null && result.toString() != null) {
            System.exit(exitCode);
        }
    }

    private String[] split(String input) {
        if (input == null || input.isBlank()) {
            return new String[]{};
        }
        return Arrays.stream(input.split(",")).filter(x -> !x.isBlank()).map(String::trim).toArray(String[]::new);
    }

    @Override
    public Result call() {
        if (this.verbose) _verbose = 1;
        if (this.verbose2) _verbose = 2;
        TimezoneDatabase.instance();
        var now = Instant.now();
        var request = TimeZoneRequest.builder()
                .source(this.sourceTimezone)
                .countries(this.split(this.targetTimezoneCountries))
                .cities(this.split(this.targetTimezoneCities))
                .timezones(this.split(this.targetTimezones))
                .build();
        if (request.hasAnyParameters()) {
            System.out.println(request.toTimezoneConverter().run(now, 1));
            return new Result();
        } else {
            new TimezoneConverterController();
            return null;
        }
    }
}