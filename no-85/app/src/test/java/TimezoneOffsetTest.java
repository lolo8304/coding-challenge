/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import timezone.TimezoneAbbr;
import timezone.TimezoneOffset;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.time.Instant;

class TimezoneOffsetTest {

    @Test
    void new_1plus_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "+" + offsetString;

        // Action
        var offset = new TimezoneOffset(offsetStringSigned);

        // Assert
        assert offset.offsetMMHH().equals(offsetString);
        assert offset.plus();

    }

    @Test
    void new_1Minus_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "-" + offsetString;

        // Action
        var offset = new TimezoneOffset(offsetStringSigned);

        // Assert
        assert offset.offsetMMHH().equals(offsetString);
        assert !offset.plus();

    }

    @Test
    void equals_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "+" + offsetString;

        // Action
        var offset1 = new TimezoneOffset(offsetStringSigned);
        var offset2 = new TimezoneOffset(offsetStringSigned);

        // Assert
        assert offset1.equals(offset2);
    }

    @Test
    void equals_not_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "+" + offsetString;

        // Action
        var offset1 = new TimezoneOffset(offsetStringSigned);
        var offset2 = new TimezoneOffset("-" + offsetString);

        // Assert
        assert !offset1.equals(offset2);
    }

    @Test
    void timezoneOffset_1plus_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "+" + offsetString;

        // Action
        var offset = new TimezoneOffset(offsetStringSigned);

        // Assert
        assert offset.toMinutes() == 60;
    }

    @Test
    void timezoneOffset_1minus_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "-" + offsetString;

        // Action
        var offset = new TimezoneOffset(offsetStringSigned);

        // Assert
        assert offset.toMinutes() == -60;
    }

    @Test
    void timezoneOffset_1plus2minus_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;

        // Action
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Assert
        assert offset1.toMinutes() == 60;
        assert offset2.toMinutes() == -120;
    }

    @Test
    void timezoneOffset_1plus2minus_add_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;

        // Action
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Assert
        assert offset1.add(offset2).toMinutes() == -60;
    }

    @Test
    void timezoneOffset_1plus2minus_sub_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;

        // Action
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Assert
        assert offset1.substract(offset2).toMinutes() == 180;
    }

    @Test
    void compareTo_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);

        // Assert
        assert compareResult > 0;
    }

    @Test
    void compareTo_not_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "-" + offsetString1;
        var offsetStringSigned2 = "+" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);

        // Assert
        assert compareResult < 0;
    }

    @Test
    void compareTo_equal_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "01:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "+" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult == 0;
        assert equalResult;
    }

    @Test
    void compareTo_equalNeg_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "01:00";
        var offsetStringSigned1 = "-" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult == 0;
        assert equalResult;
    }

    @Test
    void compareTo_anyObject_fails() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        try {
            offset1.compareTo(new Object());
            assert false;
        } catch (RuntimeException e) {
            assert true;
        }
    }

    @Test
    void compareTo_smaller1And2_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "+" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult < 0;
        assert !equalResult;
    }

    @Test
    void compareTo_smaller1And2Neg_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "01:00";
        var offsetString2 = "02:00";
        var offsetStringSigned1 = "-" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult > 0;
        assert !equalResult;
    }


    @Test
    void compareTo_smaller2And1_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "02:00";
        var offsetString2 = "01:00";
        var offsetStringSigned1 = "+" + offsetString1;
        var offsetStringSigned2 = "+" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult > 0;
        assert !equalResult;
    }

    @Test
    void compareTo_smaller2And1Neg_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString1 = "02:00";
        var offsetString2 = "01:00";
        var offsetStringSigned1 = "-" + offsetString1;
        var offsetStringSigned2 = "-" + offsetString2;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var compareResult = offset1.compareTo(offset2);
        var equalResult = offset1.equals(offset2);

        // Assert
        assert compareResult < 0;
        assert !equalResult;
    }

    @Test
    void hashCode_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned = "+" + offsetString;
        var offset1 = new TimezoneOffset(offsetStringSigned);
        var offset2 = new TimezoneOffset(offsetStringSigned);

        // Action
        var result = offset1.hashCode() == offset2.hashCode();

        // Assert
        assert result;
    }

    @Test
    void hashCode_notequal_ok() throws URISyntaxException, IOException {
        // Arrange
        var offsetString = "01:00";
        var offsetStringSigned1 = "+" + offsetString;
        var offsetStringSigned2 = "-" + offsetString;
        var offset1 = new TimezoneOffset(offsetStringSigned1);
        var offset2 = new TimezoneOffset(offsetStringSigned2);

        // Action
        var result = offset1.hashCode() == offset2.hashCode();

        // Assert
        assert !result;
    }

}
